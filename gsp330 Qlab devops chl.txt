#Implement DevOps in Google Cloud: Challenge Lab

export PROJECT_ID=$(gcloud config get-value project)
export REGION=us-central1
export ZONE=us-central1-a
export CLUSTER_NAME=hello-cluster
export REPO_NAME=my-repository

gcloud services enable container.googleapis.com \
    cloudbuild.googleapis.com \
    sourcerepo.googleapis.com

gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $PROJECT_ID \
--format="value(projectNumber)")@cloudbuild.gserviceaccount.com --role="roles/container.developer"

-------------------------------------------------------------------

git config --global user.email <email> 
git config --global user.name <name>

-----------------------------------------------------------------------

Task 1. Create the lab resources  (full)

gcloud artifacts repositories create $REPO_NAME \
    --repository-format=docker \
    --location=$REGION

gcloud beta container --project "$PROJECT_ID" clusters create "$CLUSTER_NAME" --zone "$ZONE" --no-enable-basic-auth --cluster-version latest --release-channel "regular" --machine-type "e2-medium" --image-type "COS_CONTAINERD" --disk-type "pd-balanced" --disk-size "100" --metadata disable-legacy-endpoints=true  --logging=SYSTEM,WORKLOAD --monitoring=SYSTEM --enable-ip-alias --network "projects/$PROJECT_ID/global/networks/default" --subnetwork "projects/$PROJECT_ID/regions/$REGION/subnetworks/default" --no-enable-intra-node-visibility --default-max-pods-per-node "110" --enable-autoscaling --min-nodes "2" --max-nodes "6" --location-policy "BALANCED" --no-enable-master-authorized-networks --addons HorizontalPodAutoscaling,HttpLoadBalancing,GcePersistentDiskCsiDriver --enable-autoupgrade --enable-autorepair --max-surge-upgrade 1 --max-unavailable-upgrade 0 --enable-shielded-nodes --node-locations "$ZONE"

kubectl create namespace prod	
kubectl create namespace dev

Task 2. Create a repository in Cloud Source Repositories (full)

gcloud source repos create sample-app
git clone https://source.developers.google.com/p/$PROJECT_ID/r/sample-app
cd ~
gsutil cp -r gs://spls/gsp330/sample-app/* sample-app

git init
cd sample-app/
git add .
git commit -m "QUICK GCP LAB"
git push -u origin master

git branch dev
git checkout dev
git push -u origin dev

Task 3. Create the Cloud Build Triggers

For Task 3 Follow Video Instructions.(LAB Instr)

Task 4. Deploy the first versions of the application

#open editor go to cloudbuild-dev.yaml change version to v1.0

COMMIT_ID="$(git rev-parse --short=7 HEAD)"
gcloud builds submit --tag="${REGION}-docker.pkg.dev/${PROJECT_ID}/$REPO_NAME/hello-cloudbuild:${COMMIT_ID}" .

# copy image address then open editor go to dev/deployment.yaml change <todo> to image address

git add .
git commit -m "QUICK GCP LAB" 
git push -u origin dev
git checkout master


#open editor go to cloudbuild.yaml change version to v1.0
# copy image address then open editor go to prod/deployment.yaml change <todo> to image address

git add .
git commit -m "QUICK GCP LAB" 
git push -u origin master



Task 5. Deploy the second versions of the application

git checkout dev

#change main() and add redhandler() in main.go from lab
#follow lab instrucs

git add .
git commit -m "QUICK GCP LAB" 
git push -u origin dev

git checkout master


#change main() and add redhandler() in main.go from lab
#follow lab instrucs

git add .
git commit -m "QUICK GCP LAB" 
git push -u origin master



Task 6. Roll back the production deployment

#For Task 6 Follow Video Instructions.
# cloud build -> history -> 2nd sampl-app-dev-deploy -> rebuild
